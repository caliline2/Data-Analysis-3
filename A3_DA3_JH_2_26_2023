---
title: "A3_DA3_JH_hope"
author: "Jana Hochel"
date: "2023-02-26"
output:
  pdf_document: default
  html_document: default
---

```{r setup, include=FALSE}
#####################################################################################
# Prepared for Gabor's Data Analysis
#
# Data Analysis for Business, Economics, and Policy
# by Gabor Bekes and  Gabor Kezdi
# Cambridge University Press 2021
#
# gabors-data-analysis.com 
#
# License: Free to share, modify and use for educational purposes. 
# 	Not to be used for commercial purposes.

# Chapter 17
# CH17A
# using the bisnode-firmd dataset
# version 0.9 2020-09-10
#########################################################################################



# ------------------------------------------------------------------------------------------------------
#### SET UP
# It is advised to start a new session for every case study
# CLEAR MEMORY
rm(list=ls())

# Import libraries
library(caret)
library(tidyverse)
library(readr)
library(haven)
library(glmnet)
library(purrr)
library(margins)
library(skimr)
library(kableExtra)
library(Hmisc)
library(cowplot)
library(gmodels) 
library(lspline)
library(sandwich)
library(modelsummary)
library(viridis)
library(rattle)
library(caret)
library(pROC)
library(ranger)
library(rpart)
library(partykit)
library(rpart.plot)
library(randomForest)


# set working directory
# option A: open material as project
# option B: set working directory for da_case_studies
#           example: 
setwd("C:/Users/Magdalenka Kolacik/Jankyna zaloha/CEU/Data Analytics/da_case_studies/")

# set data dir, data used
source("set-data-directory.R")             # data_dir must be first defined 
# alternative: give full path here, 
#            example data_dir="C:/Users/bekes.gabor/Dropbox (MTA KRTK)/bekes_kezdi_textbook/da_data_repo"

# load theme and functions
source("ch00-tech-prep/theme_bg.R")
source("ch00-tech-prep/da_helper_functions.R")

###########################################################
# Import data
###########################################################

data <- read_csv(paste("cs_bisnode_panel.csv", sep = "/"))


#head(data)
#ls(data)


# drop variables with many NAs
data <- data %>%
  select(-c(finished_prod, net_dom_sales, net_exp_sales, wages)) %>%
  filter((year <2015) & (year >2012))


###########################################################
# look at more financial variables, create ratios
###########################################################

# assets can't be negative. Change them to 0 and add a flag.
data <-data  %>%
  mutate(flag_asset_problem=ifelse(intang_assets<0 | curr_assets<0 | fixed_assets<0,1,0  ))
table(data$flag_asset_problem)

data <- data %>%
  mutate(intang_assets = ifelse(intang_assets < 0, 0, intang_assets),
         curr_assets = ifelse(curr_assets < 0, 0, curr_assets),
         fixed_assets = ifelse(fixed_assets < 0, 0, fixed_assets))

# generate total assets
data <- data %>%
  mutate(total_assets_bs = intang_assets + curr_assets + fixed_assets)
summary(data$total_assets_bs)

#ls(data)

pl_names <- c("extra_exp","extra_inc",  "extra_profit_loss", "inc_bef_tax" ,"inventories",
              "material_exp", "profit_loss_year", "personnel_exp")
bs_names <- c("intang_assets", "curr_liab", "fixed_assets", "liq_assets", "curr_assets",
              "share_eq", "subscribed_cap", "tang_assets" )

# divide all pl_names elements by sales and create new column for it
data <- data %>%
  mutate_at(vars(pl_names), funs("pl"=./sales))


#divide all bs_names elements by total_assets_bs and create new column for it
data <- data %>%
  mutate_at(vars(bs_names), funs("bs"=./total_assets_bs))



###########################################################
# label engineering
###########################################################

# add all missing year and comp_id combinations -
# originally missing combinations will have NAs in all other columns
data <- data %>%
  complete(year, comp_id)

# generate status_alive; if sales larger than zero and not-NA, then firm is alive
data  <- data %>%
  mutate(status_alive = sales > 0 & !is.na(sales) %>%
           as.numeric(.))

# fastgrowings in two years if there are sales in this year but no sales two years later
#data <- data %>%
#  group_by(comp_id) %>%
#  mutate(fastgrowing = ((status_alive == 1) & (lead(status_alive, 2) == 0)) %>%
#           as.numeric(.)) %>%
#  ungroup()



#Hmisc::describe(data$fastgrowing)

# Size and growth
#summary(data$sales) # There will be NAs, we'll drop them soon

data <- data %>%
  mutate(sales = ifelse(sales < 0, 1, sales),
         ln_sales = ifelse(sales > 0, log(sales), 0),
         sales_mil=sales/1000000,
         sales_mil_log = ifelse(sales > 0, log(sales_mil), 0))

data<-data %>% arrange(year) %>%
  mutate(Growth_Difference = sales - lag(sales)) %>%
  mutate(Growth_Rate = (Growth_Difference / sales) * 100)


data <- data %>%
  group_by(comp_id) %>%
  mutate(d1_sales_mil_log = sales_mil_log - Lag(sales_mil_log, 1) ) %>%
  ungroup()


# replace w 0 for new firms + add dummy to capture it
data <- data %>%
  mutate(age = (year - founded_year) %>%
           ifelse(. < 0, 0, .),
         new = as.numeric(age <= 1) %>% #  (age could be 0,1 )
           ifelse(balsheet_notfullyear == 1, 1, .),
         d1_sales_mil_log = ifelse(new == 1, 0, d1_sales_mil_log),
         new = ifelse(is.na(d1_sales_mil_log), 1, new),
         d1_sales_mil_log = ifelse(is.na(d1_sales_mil_log), 0, d1_sales_mil_log))




data<-data %>% 
#  select(comp_id,sales,year) %>%
  group_by(comp_id) %>%
  mutate(growthrate = c(NA,diff(sales))/lag(sales, 1))%>%
  #  as.factor(.)) %>%
  ungroup()

data[sapply(data, is.infinite)] <- NA
data   
#ls(data)
summary(data$growthrate)
#data <- data %>%
#  group_by(comp_id) %>%
#  mutate(fastgrowing = ((status_alive == 1) & (lead(status_alive, 2) == 0)) %>%
#           as.numeric(.)) %>%
#  ungroup()


#growthoverview1<-summary(outputd$growthrate)
#growthoverview2<-skim(outputd$growthrate)

#skim(outputd$growthrate)

#0.197,0,(ifelse(Growth_Rate

data <- data %>%
  mutate(fastgrowing = ifelse(growthrate<0.363,1,0), #75th quartile
         lagger = ifelse(growthrate<0,1,0)) #25th quartile is -0.232 but I have rounded it to 0


#outputd <- outputd %>%
#  mutate(fastgrowing = factor(ifelse(Growth_Rate<0,0,(ifelse(Growth_Rate<7.89,2,1)))))
summary(data$fastgrowing)
#skimr::skim(data$fastgrowing)
#data <- data %>%
#  mutate(fastgrowing = factor(ifelse(Growth_Rate<0.197,0,(ifelse(Growth_Rate<7.89,2,1)))))
#summary(data$fastgrowing)

#skim(outputd$growthrate)
#outputd <- outputd %>%
#  complete(growthrate)

growthoverview1<-summary(data$growthrate)
growthoverview2<-skim(data$growthrate)

#outputd <- subset(outputd, select = -c(year))

#data = merge(x = data, y = outputd, by = "comp_id",all.x = TRUE) 

#data["fastgrowing"][is.na(data["fastgrowing"])] <- 0
data <- data %>% 
  mutate(fastgrowing = coalesce(fastgrowing, 0))

data <- data %>% 
  mutate(growthrate = coalesce(growthrate, 0))

```

```{r part03, include=FALSE, message=FALSE, warning=FALSE, echo=FALSE,comment=NA}

#data$fastgrowing <- replace(data$fastgrowing, is.na(data$fastgrowing), 0)
class(data$fastgrowing)

#ls(data)
#data %>%
#  left_join(outputd,by = "comp_id") #%>%
#ls(data)
###########################################################
# sample design
###########################################################

# look at cross section
#data <- data %>%
#  filter((year == 2012) & (status_alive == 1)) %>%
  # look at firms below 10m euro revenues and above 1000 euros
#  filter(!(sales_mil > 10)) %>%
#  filter(!(sales_mil < 0.001))


#write_csv(data,paste0(data_out,"work5.csv"))

###########################################################
# Feature engineering
###########################################################

#data <- read_csv(paste0(data_out,"work5.csv"))

# change some industry category codes
data <- data %>%
  mutate(ind2_cat = ind2 %>%
           ifelse(. > 56, 60, .)  %>%
           ifelse(. < 26, 20, .) %>%
           ifelse(. < 55 & . > 35, 40, .) %>%
           ifelse(. == 31, 30, .) %>%
           ifelse(is.na(.), 99, .)
  )

table(data$ind2_cat)

# Firm characteristics
data <- data %>%
  mutate(age2 = age^2,
         foreign_management = as.numeric(foreign >= 0.5),
         gender_m = factor(gender, levels = c("female", "male", "mix")),
         m_region_loc = factor(region_m, levels = c("Central", "East", "West")))


#outputd<-data %>% 
#  select(comp_id,sales,year) %>%
#  group_by(comp_id) %>%
# mutate(growthrate = c(NA,diff(sales))/lag(sales, 1))






########################################################################
# creating flags, and winsorizing tails
########################################################################

# Variables that represent accounting items that cannot be negative (e.g. materials)
zero <-  c("extra_exp_pl", "extra_inc_pl", "inventories_pl", "material_exp_pl", "personnel_exp_pl",
           "curr_liab_bs", "fixed_assets_bs", "liq_assets_bs", "curr_assets_bs", "subscribed_cap_bs",
           "intang_assets_bs")

data <- data %>%
  mutate_at(vars(zero), funs("flag_high"= as.numeric(.> 1))) %>%
  mutate_at(vars(zero), funs(ifelse(.> 1, 1, .))) %>%
  mutate_at(vars(zero), funs("flag_error"= as.numeric(.< 0))) %>%
  mutate_at(vars(zero), funs(ifelse(.< 0, 0, .)))


# for vars that could be any, but are mostly between -1 and 1
any <-  c("extra_profit_loss_pl", "inc_bef_tax_pl", "profit_loss_year_pl", "share_eq_bs")

data <- data %>%
  mutate_at(vars(any), funs("flag_low"= as.numeric(.< -1))) %>%
  mutate_at(vars(any), funs(ifelse(.< -1, -1, .))) %>%
  mutate_at(vars(any), funs("flag_high"= as.numeric(.> 1))) %>%
  mutate_at(vars(any), funs(ifelse(.> 1, 1, .))) %>%
  mutate_at(vars(any), funs("flag_zero"= as.numeric(.== 0))) %>%
  mutate_at(vars(any), funs("quad"= .^2))


# dropping flags with no variation
variances<- data %>%
  select(contains("flag")) %>%
  apply(2, var, na.rm = TRUE) == 0

data <- data %>%
  select(-one_of(names(variances)[variances]))

########################################################################
# additional
# including some imputation
########################################################################

#ls(data)

# CEO age
data <- data %>%
  mutate(ceo_age = year-birth_year,
         flag_low_ceo_age = as.numeric(ceo_age < 25 & !is.na(ceo_age)),
         flag_high_ceo_age = as.numeric(ceo_age > 75 & !is.na(ceo_age)),
         flag_miss_ceo_age = as.numeric(is.na(ceo_age)))

data <- data %>%
  mutate(ceo_age = ifelse(ceo_age < 25, 25, ceo_age) %>%
           ifelse(. > 75, 75, .) %>%
           ifelse(is.na(.), mean(., na.rm = TRUE), .),
         ceo_young = as.numeric(ceo_age < 40))

# number emp, very noisy measure
data <- data %>%
  mutate(labor_avg_mod = ifelse(is.na(labor_avg), mean(labor_avg, na.rm = TRUE), labor_avg),
         flag_miss_labor_avg = as.numeric(is.na(labor_avg)))

summary(data$labor_avg)
summary(data$labor_avg_mod)

#data <- data %>%
#  select(-labor_avg)

# create factors
data <- data %>%
  mutate(urban_m = factor(urban_m, levels = c(1,2,3)),
         ind2_cat = factor(ind2_cat, levels = sort(unique(data$ind2_cat))))


########################################################################
# sales 
########################################################################

data <- data %>%
  mutate(sales_mil_log_sq=sales_mil_log^2)





########################################################################
# sales change
########################################################################
# Note: graphs not in book

# lowess
Hmisc::describe(data$d1_sales_mil_log) # no missing


#save_fig("ch17-extra-1", output, "small")

# generate variables ---------------------------------------------------

data <- data %>%
  mutate(flag_low_d1_sales_mil_log = ifelse(d1_sales_mil_log < -1.5, 1, 0),
         flag_high_d1_sales_mil_log = ifelse(d1_sales_mil_log > 1.5, 1, 0),
         d1_sales_mil_log_mod = ifelse(d1_sales_mil_log < -1.5, -1.5,
                                       ifelse(d1_sales_mil_log > 1.5, 1.5, d1_sales_mil_log)),
         d1_sales_mil_log_mod_sq = d1_sales_mil_log_mod^2
  )

# no more imputation, drop obs if key vars missing
data <- data %>%
  filter(!is.na(liq_assets_bs),!is.na(foreign), !is.na(ind))

# drop missing
data <- data %>%
  filter(!is.na(age),!is.na(foreign), !is.na(material_exp_pl), !is.na(m_region_loc))
Hmisc::describe(data$age)

# drop unused factor levels
data <- data %>%
  mutate_at(vars(colnames(data)[sapply(data, is.factor)]), funs(fct_drop))




##########################################################################
### Prediction
#########################################################################

#summary
#datasummary_skim(data, type='numeric', histogram = TRUE)
# datasummary_skim(data, type="categorical")


# Define variable sets ----------------------------------------------
# (making sure we use ind2_cat, which is a factor)

rawvars <-  c("curr_assets", "curr_liab", "extra_exp", "extra_inc", "extra_profit_loss", "fixed_assets",
              "inc_bef_tax", "intang_assets", "inventories", "liq_assets", "material_exp", "personnel_exp",
              "profit_loss_year", "sales", "share_eq", "subscribed_cap")
qualityvars <- c("balsheet_flag", "balsheet_length", "balsheet_notfullyear")
engvar <- c("total_assets_bs", "fixed_assets_bs", "liq_assets_bs", "curr_assets_bs",
            "share_eq_bs", "subscribed_cap_bs", "intang_assets_bs", "extra_exp_pl",
            "extra_inc_pl", "extra_profit_loss_pl", "inc_bef_tax_pl", "inventories_pl",
            "material_exp_pl", "profit_loss_year_pl", "personnel_exp_pl")
engvar2 <- c("extra_profit_loss_pl_quad", "inc_bef_tax_pl_quad",
             "profit_loss_year_pl_quad", "share_eq_bs_quad")
engvar3 <- c(grep("*flag_low$", names(data), value = TRUE),
             grep("*flag_high$", names(data), value = TRUE),
             grep("*flag_error$", names(data), value = TRUE),
             grep("*flag_zero$", names(data), value = TRUE))
d1 <-  c("d1_sales_mil_log_mod", "d1_sales_mil_log_mod_sq",
         "flag_low_d1_sales_mil_log", "flag_high_d1_sales_mil_log")
hr <- c("female", "ceo_age", "flag_high_ceo_age", "flag_low_ceo_age",
        "flag_miss_ceo_age", "ceo_count", "labor_avg_mod",
        "flag_miss_labor_avg", "foreign_management")
firm <- c("age", "age2", "new", "m_region_loc", "urban_m")

# interactions for logit, LASSO
interactions1 <- c("ind2_cat*age", "ind2_cat*age2",
                   "ind2_cat*d1_sales_mil_log_mod", "ind2_cat*sales_mil_log",
                   "ind2_cat*ceo_age", "ind2_cat*foreign_management",
                   "ind2_cat*female",   "ind2_cat*urban_m", "ind2_cat*labor_avg_mod")
interactions2 <- c("sales_mil_log*age", "sales_mil_log*female",
                   "sales_mil_log*profit_loss_year_pl", "sales_mil_log*foreign_management")


X1 <- c("sales_mil_log", "sales_mil_log_sq", "d1_sales_mil_log_mod", "profit_loss_year_pl", "ind2_cat")
X2 <- c("sales_mil_log", "sales_mil_log_sq", "d1_sales_mil_log_mod", "profit_loss_year_pl", "fixed_assets_bs","share_eq_bs","curr_liab_bs ",   "curr_liab_bs_flag_high ", "curr_liab_bs_flag_error",  "age","foreign_management" , "ind2_cat")
X3 <- c("sales_mil_log", "sales_mil_log_sq", firm, engvar, d1)
X4 <- c("sales_mil_log", "sales_mil_log_sq", firm, engvar, engvar2, engvar3, d1, hr, qualityvars)
X5 <- c("sales_mil_log", "sales_mil_log_sq", firm, engvar, engvar2, engvar3, d1, hr, qualityvars, interactions1, interactions2)

# for LASSO
logitvars <- c("sales_mil_log", "sales_mil_log_sq", engvar, engvar2, engvar3, d1, hr, firm, qualityvars, interactions1, interactions2)

# for RF (no interactions, no modified features)
rfvars  <-  c("sales_mil", "d1_sales_mil_log", rawvars, hr, firm, qualityvars)



# Feature engineering Fast growth companies

#######################################################x
#data<-data %>% arrange(year) %>%
#  mutate(Growth_Difference = ((sales - lag(sales))/sales*100) 
#(Growth_Difference / sales) * 100)

```

# FEATURE ENGINEERING

Most companies did not grow. Median growth was about 0%.
Depending on feature engineering, I have selected fast growing companies as those growing more than 7.89% (75th percentile).

```{r feature, include=TRUE, message=FALSE, warning=FALSE, echo=FALSE,comment=NA}

#skim(data$growthrate)
summary(data$growthrate)
#growthoverview1

#growthoverview2


#data = merge(x = data, y = outputd, by = "comp_id",all.x = TRUE) 

#data %>%
#  left_join(outputd,by = "comp_id") #%>%
#skim(data$fast)

#data <- data %>%
#  mutate(fastgrowing = fastgrowing) #%>%
           #recode(., `0` = 'lagger', `1` = "fastgrowing"))

#ls(data)
#######
# Fast Growing
######
```

## OLS
I have ran OLS to get an idea what the coefficients might be.
It seems that most variables coefficient is insignificant. Only sales and profit seems important.

```{r ols, include=TRUE, message=FALSE, warning=FALSE, echo=FALSE,comment=NA}

# Check simplest model X1
ols_modelx1 <- lm(formula(paste0("fastgrowing ~", paste0(X1, collapse = " + "))),
                  data = data)
summary(ols_modelx1)

glm_modelx1 <- glm(formula(paste0("fastgrowing ~", paste0(X1, collapse = " + "))),
                   data = data, family = "binomial")
summary(glm_modelx1)


# Check model X2
glm_modelx2 <- glm(formula(paste0("fastgrowing ~", paste0(X2, collapse = " + "))),
                   data = data, family = "binomial")
summary(glm_modelx2)

#calculate average marginal effects (dy/dx) for logit
mx2 <- margins(glm_modelx2)

sum_table <- summary(glm_modelx2) %>%
  coef() %>%
  as.data.frame() %>%
  select(Estimate) %>%
  mutate(factor = row.names(.)) %>%
  merge(summary(mx2)[,c("factor","AME")])


kable(x = sum_table, format = "latex", digits = 3,
      col.names = c("Variable", "Coefficient", "dx/dy"),
      caption = "Average Marginal Effects (dy/dx) for Logit Model") #%>%
#  cat(.,file= paste0(output,"AME_logit_X2.tex"))


# baseline model is X4 (all vars, but no interactions) -------------------------------------------------------

ols_model <- lm(formula(paste0("fastgrowing ~", paste0(X4, collapse = " + "))),
                data = data)
summary(ols_model)

glm_model <- glm(formula(paste0("fastgrowing ~", paste0(X4, collapse = " + "))),
                 data = data, family = "binomial")
summary(glm_model)

#calculate average marginal effects (dy/dx) for logit
# vce="none" makes it run much faster, here we do not need variances

```

## Average Marginal Effect

```{r mageffect, include=TRUE, message=FALSE, warning=FALSE, echo=FALSE,comment=NA}

m <- margins(glm_model, vce = "none")

sum_table2 <- summary(glm_model) %>%
  coef() %>%
  as.data.frame() %>%
  select(Estimate, `Std. Error`) %>%
  mutate(factor = row.names(.)) %>%
  merge(summary(m)[,c("factor","AME")])

kable(x = sum_table2, format = "latex", digits = 3,
      col.names = c("Variable", "Coefficient", "SE", "dx/dy"),
      caption = "Average Marginal Effects (dy/dx) for Logit Model") #%>%
#  cat(.,file= paste0(output,"AME_logit_X4.tex"))


# separate datasets -------------------------------------------------------


set.seed(13505)

train_indices <- as.integer(createDataPartition(data$fastgrowing, p = 0.8, list = FALSE))
data_train <- data[train_indices, ]
data_holdout <- data[-train_indices, ]

dim(data_train)
dim(data_holdout)

Hmisc::describe(data$fastgrowing)
Hmisc::describe(data_train$fastgrowing)
Hmisc::describe(data_holdout
                $fastgrowing)


d1sale_2<-ggplot(data = data, aes(x=sales, y=as.numeric(fastgrowing))) +
  geom_point(size=0.1,  shape=20, stroke=2, fill=color[2], color=color[2]) +
  geom_smooth(method="loess", se=F, colour=color[1], size=1.5, span=0.9) +
  labs(x = "Growth rate (Diff of ln sales)",y = "Fast Growing") +
  theme_bg() +
  scale_x_continuous(limits = c(-1.5,1.5), breaks = seq(-1.5,1.5, 0.5))
d1sale_2
#save_fig("ch17-extra-2", output, "small")

d1sale_3<-ggplot(data = data, aes(x=sales, y=d1_sales_mil_log_mod)) +
  geom_point(size=0.1,  shape=20, stroke=2, fill=color[2], color=color[2]) +
  labs(x = "Sale",y = "Fast Growing Companies (Diff of ln sales) (winsorized)") +
  theme_bg() +
  scale_x_continuous(limits = c(-5,5), breaks = seq(-5,5, 1)) +
  scale_y_continuous(limits = c(-3,3), breaks = seq(-3,3, 1))
d1sale_3
#save_fig("ch17-extra-3", output, "small")

ggplot(data = data, aes(x=sales, y=as.numeric(fastgrowing))) +
  geom_point(size=2,  shape=20, stroke=2, fill="blue", color="blue") +
  geom_smooth(method = "lm", formula = y ~ poly(x,2), color=color[4], se = F, size=1)+
  geom_smooth(method="loess", se=F, colour=color[5], size=1.5, span=0.9) +
  labs(x = "sales",y = "Fast Growing") +
  theme_bg()


ols_s <- lm(fastgrowing~sales_mil_log+sales_mil_log_sq,
            data = data)
summary(ols_s)


#data <- data %>%
#  mutate(Growth_Ratelog=growthrate^2)
#data$Growth_Rate

d1sale_1<-ggplot(data = data, aes(x=sales, y=as.numeric(fastgrowing))) +
  geom_point(size=0.1,  shape=20, stroke=2, fill=color[2], color=color[2]) +
  geom_smooth(method="loess", se=F, colour=color[1], size=1.5, span=0.9) +
  labs(x = "Growth rate (Diff of ln sales)",y = "Fast Growing") +
  theme_bg() +
  scale_x_continuous(limits = c(-6,10), breaks = seq(-5,10, 5))
d1sale_1

ggplot(data = data, aes(x=sales, y=as.numeric(fastgrowing))) +
  geom_point(size=2,  shape=20, stroke=2, fill="blue", color="blue") +
  geom_smooth(method = "lm", formula = y ~ poly(x,2), color=color[4], se = F, size=1)+
  geom_smooth(method="loess", se=F, colour=color[5], size=1.5, span=0.9) +
  labs(x = "Sales",y = "Fast Growing Companies") +
  theme_bg()

ggplot(data = data, aes(x=total_assets_bs, y=as.numeric(fastgrowing))) +
  geom_point(size=2,  shape=20, stroke=2, fill="blue", color="blue") +
  geom_smooth(method = "lm", formula = y ~ poly(x,2), color=color[4], se = F, size=1)+
  geom_smooth(method="loess", se=F, colour=color[5], size=1.5, span=0.9) +
  labs(x = "Total Assets",y = "Fast Growing") +
  theme_bg()


ols_s <- lm(fastgrowing~sales+total_assets_bs+urban_m+COGS+female+ceo_count+profit_loss_year,
            data = data)
summary(ols_s)


```


# PART I PREDICT PROBABILITIES

Predict probabilities
Look at cross-validated performance and pick your favorite model

## Logit model
```{r part1, include=TRUE, message=FALSE, warning=FALSE, echo=FALSE,comment=NA}


#kable(summary(data))
#skim(data)
# Predict logit models ----------------------------------------------
#######################################################x

# 5 fold cross-validation
train_control <- trainControl(
  method = "cv",
  number = 5,
  classProbs = TRUE,
  summaryFunction = twoClassSummaryExtended,
  savePredictions = TRUE
)


# Train Logit Models ----------------------------------------------

logit_model_vars <- list("X1" = X1, "X2" = X2, "X3" = X3, "X4" = X4, "X5" = X5)

CV_RMSE_folds <- list()
logit_models <- list()

for (model_name in names(logit_model_vars)) {
  
  features <- logit_model_vars[[model_name]]
  
  set.seed(13505)
  glm_model <- train(
    formula(paste0("fastgrowing ~", paste0(features, collapse = " + "))),
    method = "glm",
    data = data_train,
    na.action  = na.pass,
    family = binomial,
    trControl = train_control
  )
  
  logit_models[[model_name]] <- glm_model
  # Calculate RMSE on test for each fold
  CV_RMSE_folds[[model_name]] <- glm_model$resample[,c("Resample", "RMSE")]
  
}

# Logit lasso -----------------------------------------------------------

lambda <- 10^seq(-1, -4, length = 10)
grid <- expand.grid("alpha" = 1, lambda = lambda)

set.seed(13505)
system.time({
  logit_lasso_model <- train(
    formula(paste0("fastgrowing ~", paste0(logitvars, collapse = " + "))),
    data = data_train,
    method = "glmnet",
    preProcess = c("center", "scale"),
    family = "binomial",
    trControl = train_control,
    tuneGrid = grid,
    na.action=na.exclude
  )
})

tuned_logit_lasso_model <- logit_lasso_model$finalModel
best_lambda <- logit_lasso_model$bestTune$lambda
logit_models[["LASSO"]] <- logit_lasso_model
lasso_coeffs <- as.matrix(coef(tuned_logit_lasso_model, best_lambda))

summary(lasso_coeffs)
Hmisc::describe(lasso_coeffs)
#write.csv(lasso_coeffs, paste0(output, "lasso_logit_coeffs.csv"))

CV_RMSE_folds[["LASSO"]] <- logit_lasso_model$resample[,c("Resample", "RMSE")]


#############################################x
```


# Random Forest model

```{r randomf, include=TRUE, message=FALSE, warning=FALSE, echo=FALSE,comment=NA}

myvars <- c("total_assets_bs","liq_assets_bs", "curr_assets_bs",
            "share_eq_bs", "extra_exp_pl","extra_inc_pl", "inc_bef_tax_pl", "inventories_pl",
            "material_exp_pl", "profit_loss_year_pl", "personnel_exp_pl","female" , "flag_low_ceo_age",
            "ceo_count", "labor_avg_mod", "foreign_management","age", "age2", "new", "urban_m")

class(myvars)

# RANDOM FORESTS 
set.seed(13505)

train_indices <- as.integer(createDataPartition(data$fastgrowing, p = 0.8, list = FALSE))
data_train <- data[train_indices, ]
data_holdout <- data[-train_indices, ]

dim(data_train)
dim(data_holdout)

# do 5-fold CV

traicontrol <- trainControl(method = "cv",
                            number = 5,
                            verboseIter = FALSE)

# simpler model - random forest

# set tuning

tune_grid <- expand.grid(
  .mtry = c(8),
  #number of variables in a tree
  .splitrule = "variance",
  .min.node.size = c(50)
)
#)

# run model

set.seed(1234)
system.time({
  rmodel_1 <- train(
    formula(paste0("growthrate ~", paste0(myvars, collapse = " + "))),
    data = data_train,
    method = "ranger",
    trControl = traicontrol,
    tuneGrid = tune_grid,
    importance = "impurity",
    na.action=na.exclude
  )
})

rmodel_1
summary(rmodel_1)
```

# PART III Classification forest

Show a confusion table (on a selected fold or holdout set)
Discuss results, evaluate how useful your model may be
